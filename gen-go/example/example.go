// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package example

import (
	"bytes"
	"context"
	"fmt"
	"reflect"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Example interface {
	ShowCurrentTimestamp(ctx context.Context) (r string, err error)
	AsynchronousJob(ctx context.Context) (err error)
}

type ExampleClient struct {
	c thrift.TClient
}

func NewExampleClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ExampleClient {
	return &ExampleClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewExampleClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ExampleClient {
	return &ExampleClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewExampleClient(c thrift.TClient) *ExampleClient {
	return &ExampleClient{
		c: c,
	}
}

func (p *ExampleClient) Client_() thrift.TClient {
	return p.c
}
func (p *ExampleClient) ShowCurrentTimestamp(ctx context.Context) (r string, err error) {
	var _args0 ExampleShowCurrentTimestampArgs
	var _result1 ExampleShowCurrentTimestampResult
	if err = p.Client_().Call(ctx, "showCurrentTimestamp", &_args0, &_result1); err != nil {
		return
	}
	return _result1.GetSuccess(), nil
}

func (p *ExampleClient) AsynchronousJob(ctx context.Context) (err error) {
	var _args2 ExampleAsynchronousJobArgs
	if err := p.Client_().Call(ctx, "asynchronousJob", &_args2, nil); err != nil {
		return err
	}
	return nil
}

type ExampleProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Example
}

func (p *ExampleProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ExampleProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ExampleProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewExampleProcessor(handler Example) *ExampleProcessor {

	self3 := &ExampleProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["showCurrentTimestamp"] = &exampleProcessorShowCurrentTimestamp{handler: handler}
	self3.processorMap["asynchronousJob"] = &exampleProcessorAsynchronousJob{handler: handler}
	return self3
}

func (p *ExampleProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x4

}

type exampleProcessorShowCurrentTimestamp struct {
	handler Example
}

func (p *exampleProcessorShowCurrentTimestamp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExampleShowCurrentTimestampArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("showCurrentTimestamp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ExampleShowCurrentTimestampResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ShowCurrentTimestamp(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing showCurrentTimestamp: "+err2.Error())
		oprot.WriteMessageBegin("showCurrentTimestamp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("showCurrentTimestamp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type exampleProcessorAsynchronousJob struct {
	handler Example
}

func (p *exampleProcessorAsynchronousJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExampleAsynchronousJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.AsynchronousJob(ctx); err2 != nil {
		return true, err2
	}
	return true, nil
}

// HELPER FUNCTIONS AND STRUCTURES

type ExampleShowCurrentTimestampArgs struct {
}

func NewExampleShowCurrentTimestampArgs() *ExampleShowCurrentTimestampArgs {
	return &ExampleShowCurrentTimestampArgs{}
}

func (p *ExampleShowCurrentTimestampArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExampleShowCurrentTimestampArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("showCurrentTimestamp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExampleShowCurrentTimestampArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExampleShowCurrentTimestampArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ExampleShowCurrentTimestampResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewExampleShowCurrentTimestampResult() *ExampleShowCurrentTimestampResult {
	return &ExampleShowCurrentTimestampResult{}
}

var ExampleShowCurrentTimestampResult_Success_DEFAULT string

func (p *ExampleShowCurrentTimestampResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ExampleShowCurrentTimestampResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ExampleShowCurrentTimestampResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExampleShowCurrentTimestampResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExampleShowCurrentTimestampResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ExampleShowCurrentTimestampResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("showCurrentTimestamp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExampleShowCurrentTimestampResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ExampleShowCurrentTimestampResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExampleShowCurrentTimestampResult(%+v)", *p)
}

type ExampleAsynchronousJobArgs struct {
}

func NewExampleAsynchronousJobArgs() *ExampleAsynchronousJobArgs {
	return &ExampleAsynchronousJobArgs{}
}

func (p *ExampleAsynchronousJobArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExampleAsynchronousJobArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("asynchronousJob_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExampleAsynchronousJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExampleAsynchronousJobArgs(%+v)", *p)
}
