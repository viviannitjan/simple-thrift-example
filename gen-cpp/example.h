/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef example_H
#define example_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "example_types.h"

namespace example {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class exampleIf {
 public:
  virtual ~exampleIf() {}
  virtual void showCurrentTimestamp(std::string& _return) = 0;
  virtual void asynchronousJob() = 0;
};

class exampleIfFactory {
 public:
  typedef exampleIf Handler;

  virtual ~exampleIfFactory() {}

  virtual exampleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(exampleIf* /* handler */) = 0;
};

class exampleIfSingletonFactory : virtual public exampleIfFactory {
 public:
  exampleIfSingletonFactory(const ::std::shared_ptr<exampleIf>& iface) : iface_(iface) {}
  virtual ~exampleIfSingletonFactory() {}

  virtual exampleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(exampleIf* /* handler */) {}

 protected:
  ::std::shared_ptr<exampleIf> iface_;
};

class exampleNull : virtual public exampleIf {
 public:
  virtual ~exampleNull() {}
  void showCurrentTimestamp(std::string& /* _return */) {
    return;
  }
  void asynchronousJob() {
    return;
  }
};


class example_showCurrentTimestamp_args {
 public:

  example_showCurrentTimestamp_args(const example_showCurrentTimestamp_args&);
  example_showCurrentTimestamp_args& operator=(const example_showCurrentTimestamp_args&);
  example_showCurrentTimestamp_args() {
  }

  virtual ~example_showCurrentTimestamp_args() noexcept;

  bool operator == (const example_showCurrentTimestamp_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const example_showCurrentTimestamp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const example_showCurrentTimestamp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class example_showCurrentTimestamp_pargs {
 public:


  virtual ~example_showCurrentTimestamp_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _example_showCurrentTimestamp_result__isset {
  _example_showCurrentTimestamp_result__isset() : success(false) {}
  bool success :1;
} _example_showCurrentTimestamp_result__isset;

class example_showCurrentTimestamp_result {
 public:

  example_showCurrentTimestamp_result(const example_showCurrentTimestamp_result&);
  example_showCurrentTimestamp_result& operator=(const example_showCurrentTimestamp_result&);
  example_showCurrentTimestamp_result() : success() {
  }

  virtual ~example_showCurrentTimestamp_result() noexcept;
  std::string success;

  _example_showCurrentTimestamp_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const example_showCurrentTimestamp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const example_showCurrentTimestamp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const example_showCurrentTimestamp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _example_showCurrentTimestamp_presult__isset {
  _example_showCurrentTimestamp_presult__isset() : success(false) {}
  bool success :1;
} _example_showCurrentTimestamp_presult__isset;

class example_showCurrentTimestamp_presult {
 public:


  virtual ~example_showCurrentTimestamp_presult() noexcept;
  std::string* success;

  _example_showCurrentTimestamp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class example_asynchronousJob_args {
 public:

  example_asynchronousJob_args(const example_asynchronousJob_args&);
  example_asynchronousJob_args& operator=(const example_asynchronousJob_args&);
  example_asynchronousJob_args() {
  }

  virtual ~example_asynchronousJob_args() noexcept;

  bool operator == (const example_asynchronousJob_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const example_asynchronousJob_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const example_asynchronousJob_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class example_asynchronousJob_pargs {
 public:


  virtual ~example_asynchronousJob_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class exampleClient : virtual public exampleIf {
 public:
  exampleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  exampleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void showCurrentTimestamp(std::string& _return);
  void send_showCurrentTimestamp();
  void recv_showCurrentTimestamp(std::string& _return);
  void asynchronousJob();
  void send_asynchronousJob();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class exampleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<exampleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (exampleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_showCurrentTimestamp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_asynchronousJob(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  exampleProcessor(::std::shared_ptr<exampleIf> iface) :
    iface_(iface) {
    processMap_["showCurrentTimestamp"] = &exampleProcessor::process_showCurrentTimestamp;
    processMap_["asynchronousJob"] = &exampleProcessor::process_asynchronousJob;
  }

  virtual ~exampleProcessor() {}
};

class exampleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  exampleProcessorFactory(const ::std::shared_ptr< exampleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< exampleIfFactory > handlerFactory_;
};

class exampleMultiface : virtual public exampleIf {
 public:
  exampleMultiface(std::vector<std::shared_ptr<exampleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~exampleMultiface() {}
 protected:
  std::vector<std::shared_ptr<exampleIf> > ifaces_;
  exampleMultiface() {}
  void add(::std::shared_ptr<exampleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void showCurrentTimestamp(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->showCurrentTimestamp(_return);
    }
    ifaces_[i]->showCurrentTimestamp(_return);
    return;
  }

  void asynchronousJob() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->asynchronousJob();
    }
    ifaces_[i]->asynchronousJob();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class exampleConcurrentClient : virtual public exampleIf {
 public:
  exampleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  exampleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void showCurrentTimestamp(std::string& _return);
  int32_t send_showCurrentTimestamp();
  void recv_showCurrentTimestamp(std::string& _return, const int32_t seqid);
  void asynchronousJob();
  void send_asynchronousJob();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
